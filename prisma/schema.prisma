// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

enum UserState {
  BLOCKED
  NON_BLOCKED
}
model User {
  id            String    @id @default(cuid())
  name          String?   
  hashedPassword String?
  email          String?   @unique
  emailVerified   DateTime?
  posts          Post[]
  image         String?
  role UserRole @default(USER)
  ustate UserState @default(NON_BLOCKED)
  accounts      Account[]
  sessions      Session[]
  likes   Like[]
   comments  Comment[]
   createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Like {
  id      String   @id @default(cuid())
  userId  String
  postId  String
  user    User     @relation(fields: [userId], references: [id])
  post    Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}


model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}


// Define the Post model
model Post {
  id         String    @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  likes   Like[]
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  src        String
  name String
  description String
   comments  Comment[]
}